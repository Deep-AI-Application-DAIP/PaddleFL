// Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mpc.feature_engineering;

service MpcPositiveRatio {

    rpc SyncSampleSize(Sample) returns (Sample);

    rpc SendPubkey(Pubkey) returns (Status);

    rpc GetLabelsSum(EncSampleLabels) returns (FeatureLabelsSum);

}

service MpcWOE {
    
    rpc SyncSampleSize(Sample) returns (Sample);

    rpc SendPubkey(Pubkey) returns (Status);

    rpc GetLabelsSum (EncSampleLabels) returns (FeatureLabelsSum);

    rpc SendWOE(FeatureMetricDict) returns (Status);
    
}

service MpcIV {
    
    rpc SyncSampleSize(Sample) returns (Sample);

    rpc SendPubkey(Pubkey) returns (Status);

    rpc GetLabelsSum (EncSampleLabels) returns (FeatureLabelsSum);

    rpc GetEncIV(EncFeatureMetricDict) returns (EncFeatureMetric);

    rpc SendWOE(FeatureMetricDict) returns (Status);

    rpc SendIV(FeatureMetric) returns (Status);
}

service MpcKS {

    rpc SyncSampleSize(Sample) returns (Sample);

    rpc SendPubkey(Pubkey) returns (Status);

    rpc GetCumLabelsSum (EncSampleLabels) returns (FeatureLabelsSum);

    rpc GetEncKS(EncFeatureMetricDict) returns (EncFeatureMetricList);

    rpc SendKS(FeatureMetric) returns (Status);
}

service MpcAUC {
    
    rpc SyncSampleSize(Sample) returns (AUCParams);

    rpc SendPubkey(Pubkey) returns (Status);

    rpc GetLabelsSum (EncSampleLabels) returns (FeatureLabelsSum);

    rpc GetEncAUC(EncFeatureMetric) returns (EncFeatureMetric);

    rpc SendAUC(FeatureMetric) returns (Status);
}

message Sample {
    int64 sample_size = 1;
    int32 feature_size = 2;
}

message AUCParams {
    int64 sample_size = 1;
    int32 feature_size = 2;
    int32 num_thresholds = 3;
}

message Pubkey{
    bytes pk = 1;
}

message Status {
    int64 code = 1;
}

message EncSampleLabels {
    int64 sample_size = 1;
    repeated bytes labels = 2;
}

message BinLabelsSum {
    int32 bins_size = 1;
    map<int32, bytes> positive_sum = 2;
    map<int32, bytes> negative_sum = 3;
}

message FeatureLabelsSum {
    int32 feature_size  = 1;
    repeated BinLabelsSum labels = 2;
}

message FeatureMetric {
    int32 feature_size = 1;
    repeated float values = 2;
}

message FeatureMetricDict {
    int32 feature_size = 1;
    repeated BinMetric values = 2;
}

message BinMetric {
    int32 bins_size = 1;
    map<int32, float> value_dict = 2;
}

message EncFeatureMetric {
    int32 feature_size = 1;
    repeated bytes values = 2;
}

message EncFeatureMetricDict {
    int32 feature_size = 1;
    repeated EncBinMetric values = 2;
}

message EncBinMetric {
    int32 bins_size = 1;
    map<int32, bytes> value_dict = 2;
}

message EncFeatureMetricList {
    int32 feature_size = 1;
    repeated EncBinMetricList values = 2;
}

message EncBinMetricList {
    int32 bins_size = 1;
    repeated bytes value = 2;
}